class Solution {
//    List<List<Integer>> res = new LinkedList<>();
//    LinkedList<Integer> track = new LinkedList<>();
//    public List<List<Integer>> subsets(int[] nums) {
//        backtrack(nums, 0);
//        return res;
//    }
//
//    private void backtrack(int[] nums, int start) {
//        res.add(new LinkedList<>(track));
//        for(int i = start; i < nums.length; i++) {
//            track.addLast(nums[i]);
//            backtrack(nums, i + 1);
//            track.removeLast();
//        }
//    }

    List<List<Integer>> res = new ArrayList<>();
    // 记录回溯算法的递归路径
    List<Integer> track = new ArrayList<>();
    public List<List<Integer>> subsets(int[] nums) {
        backtrack(nums, 0);
        return res;
    }

    private void backtrack(int[] nums, int start) {
        // 每个节点都是一个子集
        // 刚开始track是[], 前序位置，每个节点的值都是一个子集
        res.add(new ArrayList<>(track));
        // 回溯法的标准框架
        for(int i = start; i < nums.length; i++) {
            // 做选择
            track.add(nums[i]);
            // 通过start控制树枝的变量，避免产生重复子集
            backtrack(nums, i + 1);
            // 撤销选择
            track.remove(track.size() - 1);
        }
    }
}

//runtime:0 ms
//memory:40.5 MB
